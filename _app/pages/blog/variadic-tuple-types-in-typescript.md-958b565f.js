import{S as os,i as cs,s as ls,e as c,t,k as E,c as l,a as i,h as e,d as n,m as b,b as g,g as r,J as a,n as W}from"../../chunks/index-396b3103.js";function is(ts){let k,L,x,A,M,D,f,es=`<code class="language-typescript"><span class="token keyword">const</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">B</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">B</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">[</span><span class="token operator">...</span>first<span class="token punctuation">,</span><span class="token operator">...</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> res <span class="token operator">=</span>  <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"hej"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,B,p,P,_,q,I,m,J,Q,T,V,Y,v,z,H,S,w,y,K,C,d,N,h,j,G;return{c(){k=c("h2"),L=t(as),x=E(),A=c("p"),M=t("This is possible to do since Typescript 4.x."),D=E(),f=c("pre"),B=E(),p=c("p"),P=t("The trick here lies in spreading the tuple type inside brackets: "),_=c("code"),q=t("[...T]"),I=t(" and make "),m=c("code"),J=t("T"),Q=t(" extend "),T=c("code"),V=t("any[]"),Y=t(" (array). Typescript will then be able to infer the typing inside the arrays/tuples you pass to "),v=c("code"),z=t("contact()"),H=t("."),S=E(),w=c("p"),y=c("a"),K=t("See example on typescriptlang.org"),C=E(),d=c("p"),N=t("If I have understand "),h=c("a"),j=t("the docs"),G=t(" correctly."),this.h()},l(s){k=l(s,"H2",{});var o=i(k);L=e(o,as),o.forEach(n),x=b(s),A=l(s,"P",{});var F=i(A);M=e(F,"This is possible to do since Typescript 4.x."),F.forEach(n),D=b(s),f=l(s,"PRE",{class:!0});var ps=i(f);ps.forEach(n),B=b(s),p=l(s,"P",{});var u=i(p);P=e(u,"The trick here lies in spreading the tuple type inside brackets: "),_=l(u,"CODE",{});var U=i(_);q=e(U,"[...T]"),U.forEach(n),I=e(u," and make "),m=l(u,"CODE",{});var X=i(m);J=e(X,"T"),X.forEach(n),Q=e(u," extend "),T=l(u,"CODE",{});var Z=i(T);V=e(Z,"any[]"),Z.forEach(n),Y=e(u," (array). Typescript will then be able to infer the typing inside the arrays/tuples you pass to "),v=l(u,"CODE",{});var R=i(v);z=e(R,"contact()"),R.forEach(n),H=e(u,"."),u.forEach(n),S=b(s),w=l(s,"P",{});var $=i(w);y=l($,"A",{href:!0,rel:!0});var ss=i(y);K=e(ss,"See example on typescriptlang.org"),ss.forEach(n),$.forEach(n),C=b(s),d=l(s,"P",{});var O=i(d);N=e(O,"If I have understand "),h=l(O,"A",{href:!0,rel:!0});var ns=i(h);j=e(ns,"the docs"),ns.forEach(n),G=e(O," correctly."),O.forEach(n),this.h()},h(){g(f,"class","language-typescript"),g(y,"href","https://www.typescriptlang.org/play?#code/MYewdgzgLgBKbAIawLwB4AqMCmAPK2YAJhDImAJ4DaAugDQwBCO+hJZltAfDDABQAzAJYAnaAC4YVAHSyM9GBGzwikmbMY0AlOPXSMDWdM0wUPAN4AoXiOxQAriLBSjwsVEOylKmgG5LAL6WlvDQMLakKLzwSFB8VABEBNAJDAkAFtgAVqkwSdgpClQAjAwATNq+QA"),g(y,"rel","nofollow"),g(h,"href","https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html"),g(h,"rel","nofollow")},m(s,o){r(s,k,o),a(k,L),r(s,x,o),r(s,A,o),a(A,M),r(s,D,o),r(s,f,o),f.innerHTML=es,r(s,B,o),r(s,p,o),a(p,P),a(p,_),a(_,q),a(p,I),a(p,m),a(m,J),a(p,Q),a(p,T),a(T,V),a(p,Y),a(p,v),a(v,z),a(p,H),r(s,S,o),r(s,w,o),a(w,y),a(y,K),r(s,C,o),r(s,d,o),a(d,N),a(d,h),a(h,j),a(d,G)},p:W,i:W,o:W,d(s){s&&n(k),s&&n(x),s&&n(A),s&&n(D),s&&n(f),s&&n(B),s&&n(p),s&&n(S),s&&n(w),s&&n(C),s&&n(d)}}}const rs={title:"Variadic tuple types in Typescript",date:"2022-05-20T00:00:00.000Z",tags:["typescript"],question:"What are variadic tuple types in Typescript?",answer:"The possibility of spreading out a tuple type thus retaining types of tuples in functions without specifying the types of possible tuples with A THOUSAND overloads. "},{title:as,date:ks,tags:ds,question:fs,answer:ys}=rs;class hs extends os{constructor(k){super(),cs(this,k,null,is,ls,{})}}export{hs as default,rs as metadata};
