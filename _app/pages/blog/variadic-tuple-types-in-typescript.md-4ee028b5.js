import{S as os,i as cs,s as ls,e as c,t,k as v,c as l,a as r,h as e,d as n,m as b,b as x,g as i,J as a,n as F}from"../../chunks/index-396b3103.js";function rs(ts){let k,M,g,A,O,B,f,es=`<code class="language-typescript"><span class="token keyword">const</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">B</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">B</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">[</span><span class="token operator">...</span>first<span class="token punctuation">,</span><span class="token operator">...</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> res <span class="token operator">=</span>  <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"hej"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,D,p,P,_,I,J,m,Q,V,E,Y,q,T,z,K,C,w,y,j,S,d,G,h,H,N;return{c(){k=c("h2"),M=t(as),g=v(),A=c("p"),O=t("This is possible to do since Typescript 4.x."),B=v(),f=c("pre"),D=v(),p=c("p"),P=t("The trick here lies in spreading the tuple type inside brackets: "),_=c("code"),I=t("[...T]"),J=t(" and make "),m=c("code"),Q=t("T"),V=t(" extend "),E=c("code"),Y=t("any[]"),q=t(" (array). Typescript will then be able to infer the typing inside the arrays/tuples you pass to "),T=c("code"),z=t("contact()"),K=t("."),C=v(),w=c("p"),y=c("a"),j=t("See example on typescriptlang.org"),S=v(),d=c("p"),G=t("If I have understand "),h=c("a"),H=t("the docs"),N=t(" correctly."),this.h()},l(s){k=l(s,"H2",{});var o=r(k);M=e(o,as),o.forEach(n),g=b(s),A=l(s,"P",{});var W=r(A);O=e(W,"This is possible to do since Typescript 4.x."),W.forEach(n),B=b(s),f=l(s,"PRE",{class:!0});var ps=r(f);ps.forEach(n),D=b(s),p=l(s,"P",{});var u=r(p);P=e(u,"The trick here lies in spreading the tuple type inside brackets: "),_=l(u,"CODE",{});var X=r(_);I=e(X,"[...T]"),X.forEach(n),J=e(u," and make "),m=l(u,"CODE",{});var Z=r(m);Q=e(Z,"T"),Z.forEach(n),V=e(u," extend "),E=l(u,"CODE",{});var R=r(E);Y=e(R,"any[]"),R.forEach(n),q=e(u," (array). Typescript will then be able to infer the typing inside the arrays/tuples you pass to "),T=l(u,"CODE",{});var U=r(T);z=e(U,"contact()"),U.forEach(n),K=e(u,"."),u.forEach(n),C=b(s),w=l(s,"P",{});var $=r(w);y=l($,"A",{href:!0,rel:!0});var ss=r(y);j=e(ss,"See example on typescriptlang.org"),ss.forEach(n),$.forEach(n),S=b(s),d=l(s,"P",{});var L=r(d);G=e(L,"If I have understand "),h=l(L,"A",{href:!0,rel:!0});var ns=r(h);H=e(ns,"the docs"),ns.forEach(n),N=e(L," correctly."),L.forEach(n),this.h()},h(){x(f,"class","language-typescript"),x(y,"href","https://www.typescriptlang.org/play?#code/MYewdgzgLgBKbAIawLwB4AqMCmAPK2YAJhDImAJ4DaAugDQwBCO+hJZltAfDDABQAzAJYAnaAC4YVAHSyM9GBGzwikmbMY0AlOPXSMDWdM0wUPAN4AoXiOxQAriLBSjwsVEOylKmgG5LAL6WlvDQMLakKLzwSFB8VABEBNAJDAkAFtgAVqkwSdgpClQAjAwATNq+QA"),x(y,"rel","nofollow"),x(h,"href","https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html"),x(h,"rel","nofollow")},m(s,o){i(s,k,o),a(k,M),i(s,g,o),i(s,A,o),a(A,O),i(s,B,o),i(s,f,o),f.innerHTML=es,i(s,D,o),i(s,p,o),a(p,P),a(p,_),a(_,I),a(p,J),a(p,m),a(m,Q),a(p,V),a(p,E),a(E,Y),a(p,q),a(p,T),a(T,z),a(p,K),i(s,C,o),i(s,w,o),a(w,y),a(y,j),i(s,S,o),i(s,d,o),a(d,G),a(d,h),a(h,H),a(d,N)},p:F,i:F,o:F,d(s){s&&n(k),s&&n(g),s&&n(A),s&&n(B),s&&n(f),s&&n(D),s&&n(p),s&&n(C),s&&n(w),s&&n(S),s&&n(d)}}}const is={title:"Variadic tuple types in Typescript",date:"2022-05-20T00:00:00.000Z",tags:["typescript"]},{title:as,date:ks,tags:ds}=is;class fs extends os{constructor(k){super(),cs(this,k,null,rs,ls,{})}}export{fs as default,is as metadata};
