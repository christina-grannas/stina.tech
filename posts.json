[{"slug":"/blog/../blog/generating-static-html-with-sveltekit","title":"Generating static html with SvelteKit","date":"2022-05-21T00:00:00.000Z","tags":["svelte"],"question":"How can you make SvelteKit generate static html pages?","answer":"Use the adapter @sveltejs/adapter-static","html":"<h2>Generating static html with SvelteKit</h2>\n<p>You can get SvelteKit to generate static html by using an adapter: <code>@sveltejs/adapter-static</code>. I used this to be able to deploy my blog to Github Pages.</p>\n<p><a href=\"https://kit.svelte.dev/docs/adapters#supported-environments-static-sites\" rel=\"nofollow\">SvelteKit:Adapters - Static Sites</a></p>","css":{"code":"","map":null},"head":""},{"slug":"/blog/../blog/variadic-tuple-types-in-typescript","title":"Variadic tuple types in Typescript","date":"2022-05-20T00:00:00.000Z","tags":["typescript"],"question":"What are variadic tuple types in Typescript?","answer":"The possibility of spreading out a tuple type thus retaining types of tuples in functions without specifying the types of possible tuples with A THOUSAND overloads. ","html":"<h2>Variadic tuple types in Typescript</h2>\n<p>This is possible to do since Typescript 4.x.</p>\n<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token generic-function\"><span class=\"token function\">concat</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">B</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">B</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span>  <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hej\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n<p>The trick here lies in spreading the tuple type inside brackets: <code>[...T]</code> and make <code>T</code> extend <code>any[]</code> (array). Typescript will then be able to infer the typing inside the arrays/tuples you pass to <code>contact()</code>.</p>\n<p><a href=\"https://www.typescriptlang.org/play?#code/MYewdgzgLgBKbAIawLwB4AqMCmAPK2YAJhDImAJ4DaAugDQwBCO+hJZltAfDDABQAzAJYAnaAC4YVAHSyM9GBGzwikmbMY0AlOPXSMDWdM0wUPAN4AoXiOxQAriLBSjwsVEOylKmgG5LAL6WlvDQMLakKLzwSFB8VABEBNAJDAkAFtgAVqkwSdgpClQAjAwATNq+QA\" rel=\"nofollow\">See example on typescriptlang.org</a></p>\n<p>If I have understand <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html\" rel=\"nofollow\">the docs</a> correctly.</p>","css":{"code":"","map":null},"head":""},{"slug":"/blog/../blog/azure-diagram-template-in-figjam","title":"Azure diagram template in FigJam","date":"2022-05-19T00:00:00.000Z","tags":["azure","figma"],"question":"Name a tool that you can use for making diagrams of Microsoft Azure architecture","answer":"FigJam has templates for Azure diagrams. But there are of course other tools out there!","html":"<h2>Azure diagram template in FigJam</h2>\n<p>FigJam has a template for designing Microsoft Azure Diagrams! There are also templates for Google Cloud and AWS.</p>\n<img src=\"figjam.png\" alt=\"A screenshot showing FigJam templates\">\n<img src=\"figjam-azure.png\" alt=\"A screenshot showing Microsoft Azure template in FigJam\">","css":{"code":"","map":null},"head":""}]